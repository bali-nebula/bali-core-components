[
    $description: "
        This abstract primitive type defines the messages that a collection component can respond to. It
        also provides a compiled method implementation for some of the messages.
    "($mediaType: "application/bsmd")
    $parameters: [
        $itemType: [
            $description: "
                This parameter specifies the name of the type of the items in the collection.
            "($mediaType: "application/bsmd")
            $type: /nebula/strings/Name/v1
            $default: /nebula/abstractions/Component/v1
        ]($type: /nebula/aspects/Parameter/v1)
    ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Parameter/v1))
    $interfaces: [
        /nebula/interfaces/Sequential/v1($itemType: itemType)
    ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Name/v1))
    $messages: [
        $index: [
            $description: "
                This message returns the index of the specified item in this collection.
            "($mediaType: "application/bsmd")
            $type: /nebula/interfaces/Discrete/v1($range: [0..<])
            $parameters: [
                $item: [
                    $description: "
                        This parameter specifies the item to be searched for in this collection.
                    "($mediaType: "application/bsmd")
                    $type: itemType
                ]($type: /nebula/aspects/Parameter/v1)
            ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Parameter/v1))
        ]($type: /nebula/aspects/Message/v1)
        $addItem: [
            $description: "
                This message adds the specified item to this collection.
            "($mediaType: "application/bsmd")
            $type: /nebula/abstractions/Collection/v1($itemType: itemType)
            $parameters: [
                $item: [
                    $description: "
                        This parameter specifies the item to be added to this collection.
                    "($mediaType: "application/bsmd")
                    $type: itemType
                ]($type: /nebula/aspects/Parameter/v1)
            ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Parameter/v1))
        ]($type: /nebula/aspects/Message/v1)
        $addItems: [
            $description: "
                This message adds the items in the specified collection to this collection.
            "($mediaType: "application/bsmd")
            $type: /nebula/abstractions/Collection/v1($itemType: itemType)
            $parameters: [
                $items: [
                    $description: "
                        This parameter specifies the collection of items to be added to this collection.
                    "($mediaType: "application/bsmd")
                    $type: /nebula/abstractions/Collection/v1($itemType: itemType)
                ]($type: /nebula/aspects/Parameter/v1)
            ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Parameter/v1))
        ]($type: /nebula/aspects/Message/v1)
        $containsItem: [
            $description: "
                This message returns whether or not the specified item in contained in this collection.
            "($mediaType: "application/bsmd")
            $type: /nebula/elements/Boolean/v1
            $parameters: [
                $item: [
                    $description: "
                        This parameter specifies the item to be searched for in this collection.
                    "($mediaType: "application/bsmd")
                    $type: itemType
                ]($type: /nebula/aspects/Parameter/v1)
            ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Parameter/v1))
        ]($type: /nebula/aspects/Message/v1)
        $containsAny: [
            $description: "
                This message returns whether or not any of the specified items are contained in this collection.
            "($mediaType: "application/bsmd")
            $type: /nebula/elements/Boolean/v1
            $parameters: [
                $items: [
                    $description: "
                        This parameter specifies the collection of items to be searched for in this collection.
                    "($mediaType: "application/bsmd")
                    $type: /nebula/abstractions/Collection/v1($itemType: itemType)
                ]($type: /nebula/aspects/Parameter/v1)
            ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Parameter/v1))
        ]($type: /nebula/aspects/Message/v1)
        $containsAll: [
            $description: "
                This message returns whether or not all of the specified items are contained in this collection.
            "($mediaType: "application/bsmd")
            $type: /nebula/elements/Boolean/v1
            $parameters: [
                $items: [
                    $description: "
                        This parameter specifies the collection of items to be searched for in this collection.
                    "($mediaType: "application/bsmd")
                    $type: /nebula/abstractions/Collection/v1($itemType: itemType)
                ]($type: /nebula/aspects/Parameter/v1)
            ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Parameter/v1))
        ]($type: /nebula/aspects/Message/v1)
        $emptyCollection: [
            $description: "
                This message removes all items from this collection.
            "($mediaType: "application/bsmd")
            $type: /nebula/abstractions/Collection/v1($itemType: itemType)
        ]($type: /nebula/aspects/Message/v1)
    ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Message/v1))
    $methods: [
        $size: [
            $description: "
                This method implements the `$size` message specified in the
                `/nebula/interfaces/Sequential/v1` interface.
            "($mediaType: "application/bsmd")
            $procedure: {
                return size(target)
            }
            $instructions: "
                1.ReturnStatement:
                PUSH ARGUMENT $target
                CALL $size WITH 1 ARGUMENT
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.ReturnStatement": 1
            ]
            $bytecode: '3801C8795000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [ ]($type: /nebula/collections/Set/v1)
            $messages: [ ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $isEmpty: [
            $description: "
                This method implements the `$isEmpty` message specified in the
                `/nebula/interfaces/Sequential/v1` interface.
            "($mediaType: "application/bsmd")
            $procedure: {
                return size(target) = 0
            }
            $instructions: "
                1.ReturnStatement:
                PUSH ARGUMENT $target
                CALL $size WITH 1 ARGUMENT
                PUSH LITERAL `0`
                CALL $areEqual WITH 2 ARGUMENTS
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.ReturnStatement": 1
            ]
            $bytecode: '3801C8792803D0075000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [ ]($type: /nebula/collections/Set/v1)
            $messages: [ ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $item: [
            $description: "
                This method implements the `$item` message specified in the
                `/nebula/interfaces/Sequential/v1` interface.
            "($mediaType: "application/bsmd")
            $procedure: {
                return item(target, index)
            }
            $instructions: "
                1.ReturnStatement:
                PUSH ARGUMENT $target
                LOAD VARIABLE $index
                CALL $item WITH 2 ARGUMENTS
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.ReturnStatement": 1
            ]
            $bytecode: '38016001D03F5000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [
                $index
            ]($type: /nebula/collections/Set/v1)
            $messages: [ ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $items: [
            $description: "
                This method implements the `$items` message specified in the
                `/nebula/interfaces/Sequential/v1` interface.
            "($mediaType: "application/bsmd")
            $procedure: {
                $result := duplicate(target, false)
                with each $index in indices do {
                    $item := item(target, index)
                    addItem(result, item)
                }
                return result
            }
            $instructions: "
                1.EvaluateStatement:
                PUSH ARGUMENT $target
                PUSH LITERAL `false`
                CALL $duplicate WITH 2 ARGUMENTS
                SAVE VARIABLE $result
                
                2.WithStatement:
                LOAD VARIABLE $indices
                SEND $iterator TO COMPONENT
                SAVE VARIABLE $iterator-2
                
                2.1.ConditionClause:
                LOAD VARIABLE $iterator-2
                SEND $hasNext TO COMPONENT
                JUMP TO 2.WithStatementDone ON FALSE
                LOAD VARIABLE $iterator-2
                SEND $next TO COMPONENT
                SAVE VARIABLE $index
                
                2.1.1.EvaluateStatement:
                PUSH ARGUMENT $target
                LOAD VARIABLE $index
                CALL $item WITH 2 ARGUMENTS
                SAVE VARIABLE $item
                
                2.1.2.EvaluateStatement:
                LOAD VARIABLE $result
                LOAD VARIABLE $item
                CALL $addItem WITH 2 ARGUMENTS
                SAVE VARIABLE $result-1
                
                2.ConditionRepeat:
                JUMP TO 2.1.ConditionClause
                
                2.WithStatementDone:
                JUMP TO NEXT INSTRUCTION
                
                3.ReturnStatement:
                LOAD VARIABLE $result
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.EvaluateStatement": 1
                "2.WithStatement": 5
                "2.1.ConditionClause": 8
                "2.1.1.EvaluateStatement": 14
                "2.1.2.EvaluateStatement": 18
                "2.ConditionRepeat": 22
                "2.WithStatementDone": 23
                "3.ReturnStatement": 24
            ]
            $bytecode: '
                38012801D02680056002E00280046004E00118176004E003800138016001
                D03F800360056003D00180060008000060055000
            '(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [
                $index
                $indices
                $item
                $iterator-2
                $result
                $result-1
            ]($type: /nebula/collections/Set/v1)
            $messages: [
                $hasNext
                $iterator
                $next
            ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $iterator: [
            $description: "
                This method implements the `$iterator` message from the
                `/nebula/interfaces/Sequential/v1` interface.
            "($mediaType: "application/bsmd")
            $procedure: {
                return iterator(target)
            }
            $instructions: "
                1.ReturnStatement:
                PUSH ARGUMENT $target
                CALL $iterator WITH 1 ARGUMENT
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.ReturnStatement": 1
            ]
            $bytecode: '3801C8405000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [ ]($type: /nebula/collections/Set/v1)
            $messages: [ ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $index: [
            $description: "
                This method implements the `$index` message from this class.
            "($mediaType: "application/bsmd")
            $procedure: {
                $index := 0
                with each $candidate in target do {
                    $index += 1
                    if candidate = item then {
                        return index
                    }
                }
                return 0
            }
            $instructions: "
                1.EvaluateStatement:
                PUSH LITERAL `0`
                SAVE VARIABLE $index
                
                2.WithStatement:
                PUSH ARGUMENT $target
                SEND $iterator TO COMPONENT
                SAVE VARIABLE $iterator-2
                
                2.1.ConditionClause:
                LOAD VARIABLE $iterator-2
                SEND $hasNext TO COMPONENT
                JUMP TO 2.WithStatementDone ON FALSE
                LOAD VARIABLE $iterator-2
                SEND $next TO COMPONENT
                SAVE VARIABLE $candidate
                
                2.1.1.EvaluateStatement:
                LOAD VARIABLE $index
                PUSH LITERAL `1`
                CALL $sum WITH 2 ARGUMENTS
                SAVE VARIABLE $index
                
                2.1.2.IfStatement:
                JUMP TO NEXT INSTRUCTION
                
                2.1.2.1.ConditionClause:
                LOAD VARIABLE $candidate
                PUSH ARGUMENT $item
                CALL $areEqual WITH 2 ARGUMENTS
                JUMP TO 2.1.2.IfStatementDone ON FALSE
                
                2.1.2.1.1.ReturnStatement:
                LOAD VARIABLE $index
                PULL RESULT
                
                2.1.2.IfStatementDone:
                JUMP TO NEXT INSTRUCTION
                
                2.ConditionRepeat:
                JUMP TO 2.1.ConditionClause
                
                2.WithStatementDone:
                JUMP TO NEXT INSTRUCTION
                
                3.ReturnStatement:
                PUSH LITERAL `0`
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.EvaluateStatement": 1
                "2.WithStatement": 3
                "2.1.ConditionClause": 6
                "2.1.1.EvaluateStatement": 12
                "2.1.2.IfStatement": 16
                "2.1.2.1.ConditionClause": 17
                "2.1.2.1.1.ReturnStatement": 21
                "2.1.2.IfStatementDone": 23
                "2.ConditionRepeat": 24
                "2.WithStatementDone": 25
                "3.ReturnStatement": 26
            ]
            $bytecode: '
                280380023801E00280036003E00118196003E003800160022804D07E8002
                000060013802D00718176002500000000006000028035000
            '(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
                $item
            ]
            $variables: [
                $candidate
                $index
                $iterator-2
            ]($type: /nebula/collections/Set/v1)
            $messages: [
                $hasNext
                $iterator
                $next
            ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $addItem: [
            $description: "
                This method implements the `$addItem` message from this class.
            "($mediaType: "application/bsmd")
            $procedure: {
                return addItem(target, item)
            }
            $instructions: "
                1.ReturnStatement:
                PUSH ARGUMENT $target
                PUSH ARGUMENT $item
                CALL $addItem WITH 2 ARGUMENTS
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.ReturnStatement": 1
            ]
            $bytecode: '38013802D0015000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
                $item
            ]
            $variables: [ ]($type: /nebula/collections/Set/v1)
            $messages: [ ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $addItems: [
            $description: "
                This method implements the `$addItems` message from this class.
            "($mediaType: "application/bsmd")
            $procedure: {
                with each $item in items do {
                    addItem(target, item)
                }
                return target
            }
            $instructions: "
                1.WithStatement:
                PUSH ARGUMENT $items
                SEND $iterator TO COMPONENT
                SAVE VARIABLE $iterator-2
                
                1.1.ConditionClause:
                LOAD VARIABLE $iterator-2
                SEND $hasNext TO COMPONENT
                JUMP TO 1.WithStatementDone ON FALSE
                LOAD VARIABLE $iterator-2
                SEND $next TO COMPONENT
                SAVE VARIABLE $item
                
                1.1.1.EvaluateStatement:
                PUSH ARGUMENT $target
                LOAD VARIABLE $item
                CALL $addItem WITH 2 ARGUMENTS
                SAVE VARIABLE $result-1
                
                1.ConditionRepeat:
                JUMP TO 1.1.ConditionClause
                
                1.WithStatementDone:
                JUMP TO NEXT INSTRUCTION
                
                2.ReturnStatement:
                PUSH ARGUMENT $target
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.WithStatement": 1
                "1.1.ConditionClause": 4
                "1.1.1.EvaluateStatement": 10
                "1.ConditionRepeat": 14
                "1.WithStatementDone": 15
                "2.ReturnStatement": 16
            ]
            $bytecode: '
                3802E00280026002E001180F6002E003800138016001D001800300040000
                38015000
            '(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
                $items
            ]
            $variables: [
                $item
                $iterator-2
                $result-1
            ]($type: /nebula/collections/Set/v1)
            $messages: [
                $hasNext
                $iterator
                $next
            ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $containsItem: [
            $description: "
                This method implements the `$containsItem` message from this class.
            "($mediaType: "application/bsmd")
            $procedure: {
                with each $candidate in target do {
                    if candidate = item then {
                        return true
                    }
                }
                return false
            }
            $instructions: "
                1.WithStatement:
                PUSH ARGUMENT $target
                SEND $iterator TO COMPONENT
                SAVE VARIABLE $iterator-2
                
                1.1.ConditionClause:
                LOAD VARIABLE $iterator-2
                SEND $hasNext TO COMPONENT
                JUMP TO 1.WithStatementDone ON FALSE
                LOAD VARIABLE $iterator-2
                SEND $next TO COMPONENT
                SAVE VARIABLE $candidate
                
                1.1.1.IfStatement:
                JUMP TO NEXT INSTRUCTION
                
                1.1.1.1.ConditionClause:
                LOAD VARIABLE $candidate
                PUSH ARGUMENT $item
                CALL $areEqual WITH 2 ARGUMENTS
                JUMP TO 1.1.1.IfStatementDone ON FALSE
                
                1.1.1.1.1.ReturnStatement:
                PUSH LITERAL `true`
                PULL RESULT
                
                1.1.1.IfStatementDone:
                JUMP TO NEXT INSTRUCTION
                
                1.ConditionRepeat:
                JUMP TO 1.1.ConditionClause
                
                1.WithStatementDone:
                JUMP TO NEXT INSTRUCTION
                
                2.ReturnStatement:
                PUSH LITERAL `false`
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.WithStatement": 1
                "1.1.ConditionClause": 4
                "1.1.1.IfStatement": 10
                "1.1.1.1.ConditionClause": 11
                "1.1.1.1.1.ReturnStatement": 15
                "1.1.1.IfStatementDone": 17
                "1.ConditionRepeat": 18
                "1.WithStatementDone": 19
                "2.ReturnStatement": 20
            ]
            $bytecode: '
                3801E00280026002E00118136002E0038001000060013802D00718112802
                500000000004000028015000
            '(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
                $item
            ]
            $variables: [
                $candidate
                $iterator-2
            ]($type: /nebula/collections/Set/v1)
            $messages: [
                $hasNext
                $iterator
                $next
            ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $containsAny: [
            $description: "
                This method implements the `$containsAny` message from this class.
            "($mediaType: "application/bsmd")
            $procedure: {
                with each $item in items do {
                    if target.containsItem(item) then {
                        return true
                    }
                }
                return false
            }
            $instructions: "
                1.WithStatement:
                PUSH ARGUMENT $items
                SEND $iterator TO COMPONENT
                SAVE VARIABLE $iterator-2
                
                1.1.ConditionClause:
                LOAD VARIABLE $iterator-2
                SEND $hasNext TO COMPONENT
                JUMP TO 1.WithStatementDone ON FALSE
                LOAD VARIABLE $iterator-2
                SEND $next TO COMPONENT
                SAVE VARIABLE $item
                
                1.1.1.IfStatement:
                JUMP TO NEXT INSTRUCTION
                
                1.1.1.1.ConditionClause:
                PUSH ARGUMENT $target
                NOTE --Place a list of the message arguments on the stack.
                CALL $list
                LOAD VARIABLE $item
                CALL $addItem WITH 2 ARGUMENTS
                NOTE --Send the message with its arguments to the recipient.
                SEND $containsItem TO COMPONENT WITH ARGUMENTS
                JUMP TO 1.1.1.IfStatementDone ON FALSE
                
                1.1.1.1.1.ReturnStatement:
                PUSH LITERAL `true`
                PULL RESULT
                
                1.1.1.IfStatementDone:
                JUMP TO NEXT INSTRUCTION
                
                1.ConditionRepeat:
                JUMP TO 1.1.ConditionClause
                
                1.WithStatementDone:
                JUMP TO NEXT INSTRUCTION
                
                2.ReturnStatement:
                PUSH LITERAL `false`
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.WithStatement": 1
                "1.1.ConditionClause": 4
                "1.1.1.IfStatement": 10
                "1.1.1.1.ConditionClause": 11
                "1.1.1.1.1.ReturnStatement": 17
                "1.1.1.IfStatementDone": 19
                "1.ConditionRepeat": 20
                "1.WithStatementDone": 21
                "2.ReturnStatement": 22
            ]
            $bytecode: '
                3802E00380026002E00218156002E004800100003801C0466001D001E801
                18132802500000000004000028015000
            '(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
                $items
            ]
            $variables: [
                $item
                $iterator-2
            ]($type: /nebula/collections/Set/v1)
            $messages: [
                $containsItem
                $hasNext
                $iterator
                $next
            ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $containsAll: [
            $description: "
                This method implements the `$containsAll` message from this class.
            "($mediaType: "application/bsmd")
            $procedure: {
                with each $item in items do {
                    if NOT target.containsItem(item) then {
                        return false
                    }
                }
                return true
            }
            $instructions: "
                1.WithStatement:
                PUSH ARGUMENT $items
                SEND $iterator TO COMPONENT
                SAVE VARIABLE $iterator-2
                
                1.1.ConditionClause:
                LOAD VARIABLE $iterator-2
                SEND $hasNext TO COMPONENT
                JUMP TO 1.WithStatementDone ON FALSE
                LOAD VARIABLE $iterator-2
                SEND $next TO COMPONENT
                SAVE VARIABLE $item
                
                1.1.1.IfStatement:
                JUMP TO NEXT INSTRUCTION
                
                1.1.1.1.ConditionClause:
                PUSH ARGUMENT $target
                NOTE --Place a list of the message arguments on the stack.
                CALL $list
                LOAD VARIABLE $item
                CALL $addItem WITH 2 ARGUMENTS
                NOTE --Send the message with its arguments to the recipient.
                SEND $containsItem TO COMPONENT WITH ARGUMENTS
                CALL $not WITH 1 ARGUMENT
                JUMP TO 1.1.1.IfStatementDone ON FALSE
                
                1.1.1.1.1.ReturnStatement:
                PUSH LITERAL `false`
                PULL RESULT
                
                1.1.1.IfStatementDone:
                JUMP TO NEXT INSTRUCTION
                
                1.ConditionRepeat:
                JUMP TO 1.1.ConditionClause
                
                1.WithStatementDone:
                JUMP TO NEXT INSTRUCTION
                
                2.ReturnStatement:
                PUSH LITERAL `true`
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.WithStatement": 1
                "1.1.ConditionClause": 4
                "1.1.1.IfStatement": 10
                "1.1.1.1.ConditionClause": 11
                "1.1.1.1.1.ReturnStatement": 18
                "1.1.1.IfStatementDone": 20
                "1.ConditionRepeat": 21
                "1.WithStatementDone": 22
                "2.ReturnStatement": 23
            ]
            $bytecode: '
                3802E00380026002E00218166002E004800100003801C0466001D001E801
                C85218142801500000000004000028025000
            '(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
                $items
            ]
            $variables: [
                $item
                $iterator-2
            ]($type: /nebula/collections/Set/v1)
            $messages: [
                $containsItem
                $hasNext
                $iterator
                $next
            ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $emptyCollection: [
            $description: "
                This method implements the `$emptyCollection` message from this class.
            "($mediaType: "application/bsmd")
            $procedure: {
                return emptyCollection(target)
            }
            $instructions: "
                1.ReturnStatement:
                PUSH ARGUMENT $target
                CALL $emptyCollection WITH 1 ARGUMENT
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.ReturnStatement": 1
            ]
            $bytecode: '3801C82A5000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [ ]($type: /nebula/collections/Set/v1)
            $messages: [ ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
    ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Method/v1))
    $literals: [
        false
        true
        0
        1
    ]($type: /nebula/collections/Set/v1)
](
    $type: /nebula/types/Primitive/v1($existence: $abstract)
    $tag: #24620A7W8TFYHN03A7Y2AQYZ7GMLATWZ
    $version: v1
    $permissions: /nebula/permissions/public/v1
    $previous: none
)
