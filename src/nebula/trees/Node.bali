[
    $parent: /nebula/abstractions/Component/v1
    $description: "
        This primitive type defines the operations that a node component can respond to. It
        also provides a compiled method implementation for each operation.
    "($mediaType: "application/bsmd")
    $interfaces: [
        /nebula/interfaces/Sequential/v1($itemType: itemType)
    ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Name/v1))
    $operations: [
        $addItem: [
            $description: "
                This operation adds the specified item after the last child item in the node.
            "($mediaType: "application/bsmd")
            $type: /nebula/abstractions/Component/v1
        ]($type: /nebula/aspects/Operation/v1)
    ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Operation/v1))
    $methods: [
        $size: [
            $description: "
                This method implements the `$size` operation from the
                `/nebula/interfaces/Sequential/v1` interface.
            "($mediaType: "application/bsmd")
            $procedure: {
                return size(target)
            }
        ]($type: /nebula/aspects/Method/v1)
        $isEmpty: [
            $description: "
                This method implements the `$isEmpty` operation from the
                `/nebula/interfaces/Sequential/v1` interface.
            "($mediaType: "application/bsmd")
            $procedure: {
                return size(target) = 0
            }
        ]($type: /nebula/aspects/Method/v1)
        $item: [
            $description: "
                This method implements the `$item` operation from the
                `/nebula/interfaces/Sequential/v1` interface.
            "($mediaType: "application/bsmd")
            $procedure: {
                return item(target, index)
            }
        ]($type: /nebula/aspects/Method/v1)
        $items: [
            $description: "
                This method implements the `$items` operation from the
                `/nebula/interfaces/Sequential/v1` interface.
            "($mediaType: "application/bsmd")
            $procedure: {
                $result := node(target.type())
                $counter = 0
                with each $index in range do {
                    result.addItem(target.item(index))
                }
                return result
            }
        ]($type: /nebula/aspects/Method/v1)
        $iterator: [
            $description: "
                This method implements the `$iterator` operation from the
                `/nebula/interfaces/Sequential/v1` interface.
            "($mediaType: "application/bsmd")
            $procedure: {
                return iterator(target)
            }
        ]($type: /nebula/aspects/Method/v1)
        $setAttribute: [
            $description: "
                This method implements the `$setAttribute` operation inherited from the
                `/nebula/interfaces/Composite/v1` interface.
            "($mediaType: "application/bsmd")
            $procedure: {
                return setAttribute(target, key, value)
            }
        ]($type: /nebula/aspects/Method/v1)
        $attribute: [
            $description: "
                This method implements the `$attribute` operation inherited from the
                `/nebula/interfaces/Composite/v1` interface.
            "($mediaType: "application/bsmd")
            $procedure: {
                return attribute(target, key)
            }
        ]($type: /nebula/aspects/Method/v1)
        $addItem: [
            $description: "
                This method implements the `$addItem` operation for this class.
            "($mediaType: "application/bsmd")
            $procedure: {
                return addItem(target, item)
            }
        ]($type: /nebula/aspects/Method/v1)
    ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Method/v1))
](
    $type: /nebula/types/Primitive/v1
    $tag: #GJYCWSFFRS648Y5S2L7F1CHRMB4S8NMW
    $version: v1
    $permissions: /nebula/permissions/public/v1
    $previous: none
)
