[
    $description: "
        This primitive type defines the messages that a set component can respond to. It
        also provides a compiled method implementation for each message.
    "($mediaType: "application/bsmd")
    $parameters: [
        $itemType: [
            $description: "
                This parameter specifies the name of the type of the values in the set.
            "($mediaType: "application/bsmd")
            $type: /nebula/strings/Name/v1
            $default: /nebula/abstractions/Component/v1
        ]($type: /nebula/aspects/Parameter/v1)
    ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Parameter/v1))
    $parent: /nebula/abstractions/Collection/v1($itemType: itemType)
    $libraries: [
        /nebula/libraries/Logical/v1
    ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Name/v1))
    $messages: [
        $removeItem: [
            $description: "
                This message removes the specified item from the set.
            "($mediaType: "application/bsmd")
            $type: /nebula/collections/Set/v1($itemType: itemType)
            $parameters: [
                $item: [
                    $description: "
                        This parameter specifies the item to be removed from the set.
                    "($mediaType: "application/bsmd")
                    $type: itemType
                ]($type: /nebula/aspects/Parameter/v1)
            ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Parameter/v1))
        ]($type: /nebula/aspects/Message/v1)
        $removeItems: [
            $description: "
                This message removes the specified items from the set.
            "($mediaType: "application/bsmd")
            $type: /nebula/collections/Set/v1($itemType: itemType)
            $parameters: [
                $items: [
                    $description: "
                        This parameter specifies the items to be removed from the set.
                    "($mediaType: "application/bsmd")
                    $type: /nebula/collections/Set/v1($itemType: itemType)
                ]($type: /nebula/aspects/Parameter/v1)
            ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Parameter/v1))
        ]($type: /nebula/aspects/Message/v1)
    ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Message/v1))
    $methods: [
        $accept: [
            $description: "
                This method implements the `$accept` message inherited from the
                `/nebula/abstractions/Component/v1` class.
            "($mediaType: "application/bsmd")
            $procedure: {
                visitor.visitSet(target)
            }
            $instructions: "
                1.EvaluateStatement:
                LOAD VARIABLE $visitor
                NOTE --Place a list of the message arguments on the stack.
                CALL $list
                PUSH ARGUMENT $target
                CALL $addItem WITH 2 ARGUMENTS
                NOTE --Send the message with its arguments to the recipient.
                SEND $visitSet TO COMPONENT WITH ARGUMENTS
                SAVE VARIABLE $result-1
                LOAD VARIABLE $result-1
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.EvaluateStatement": 1
            ]
            $bytecode: '6002C0453801D001E801800160015000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [
                $result-1
                $visitor
            ]($type: /nebula/collections/Set/v1)
            $messages: [
                $visitSet
            ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $removeItem: [
            $description: "
                This method implements the `$removeItem` message for this class.
            "($mediaType: "application/bsmd")
            $procedure: {
                return removeItem(target, item)
            }
            $instructions: "
                1.ReturnStatement:
                PUSH ARGUMENT $target
                LOAD VARIABLE $item
                CALL $removeItem WITH 2 ARGUMENTS
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.ReturnStatement": 1
            ]
            $bytecode: '38016001D0685000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [
                $item
            ]($type: /nebula/collections/Set/v1)
            $messages: [ ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $removeItems: [
            $description: "
                This method implements the `$removeItems` message for this class.
            "($mediaType: "application/bsmd")
            $procedure: {
                with each $item in items do {
                    removeItem(target, item)
                }
                return target
            }
            $instructions: "
                1.WithStatement:
                LOAD VARIABLE $items
                SEND $iterator TO COMPONENT
                SAVE VARIABLE $iterator-2
                
                1.1.ConditionClause:
                LOAD VARIABLE $iterator-2
                SEND $hasNext TO COMPONENT
                JUMP TO 1.WithStatementDone ON FALSE
                LOAD VARIABLE $iterator-2
                SEND $next TO COMPONENT
                SAVE VARIABLE $item
                
                1.1.1.EvaluateStatement:
                PUSH ARGUMENT $target
                LOAD VARIABLE $item
                CALL $removeItem WITH 2 ARGUMENTS
                SAVE VARIABLE $result-1
                
                1.ConditionRepeat:
                JUMP TO 1.1.ConditionClause
                
                1.WithStatementDone:
                JUMP TO NEXT INSTRUCTION
                
                2.ReturnStatement:
                PUSH ARGUMENT $target
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.WithStatement": 1
                "1.1.ConditionClause": 4
                "1.1.1.EvaluateStatement": 10
                "1.ConditionRepeat": 14
                "1.WithStatementDone": 15
                "2.ReturnStatement": 16
            ]
            $bytecode: '
                6002E00280036003E001180F6003E003800138016001D068800400040000
                38015000
            '(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [
                $item
                $items
                $iterator-2
                $result-1
            ]($type: /nebula/collections/Set/v1)
            $messages: [
                $hasNext
                $iterator
                $next
            ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $Not: [
            $description: "
                This method implements the `$Not` function specified in the
                `/nebula/libraries/Logical/v1` library.
            "($mediaType: "application/bsmd")
            $procedure: {
                return not(set)
            }
            $instructions: "
                1.ReturnStatement:
                LOAD VARIABLE $set
                CALL $not WITH 1 ARGUMENT
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.ReturnStatement": 1
            ]
            $bytecode: '6001C8515000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [
                $set
            ]($type: /nebula/collections/Set/v1)
            $messages: [ ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $And: [
            $description: "
                This method implements the `$And` function specified in the
                `/nebula/libraries/Logical/v1` library.
            "($mediaType: "application/bsmd")
            $procedure: {
                return and(first, second)
            }
            $instructions: "
                1.ReturnStatement:
                LOAD VARIABLE $first
                LOAD VARIABLE $second
                CALL $and WITH 2 ARGUMENTS
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.ReturnStatement": 1
            ]
            $bytecode: '60016002D0035000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [
                $first
                $second
            ]($type: /nebula/collections/Set/v1)
            $messages: [ ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $Sans: [
            $description: "
                This method implements the `$Sans` function specified in the
                `/nebula/libraries/Logical/v1` library.
            "($mediaType: "application/bsmd")
            $procedure: {
                return sans(first, second)
            }
            $instructions: "
                1.ReturnStatement:
                LOAD VARIABLE $first
                LOAD VARIABLE $second
                CALL $sans WITH 2 ARGUMENTS
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.ReturnStatement": 1
            ]
            $bytecode: '60016002D06B5000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [
                $first
                $second
            ]($type: /nebula/collections/Set/v1)
            $messages: [ ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $Or: [
            $description: "
                This method implements the `$Or` function specified in the
                `/nebula/libraries/Logical/v1` library.
            "($mediaType: "application/bsmd")
            $procedure: {
                return or(first, second)
            }
            $instructions: "
                1.ReturnStatement:
                LOAD VARIABLE $first
                LOAD VARIABLE $second
                CALL $or WITH 2 ARGUMENTS
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.ReturnStatement": 1
            ]
            $bytecode: '60016002D0535000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [
                $first
                $second
            ]($type: /nebula/collections/Set/v1)
            $messages: [ ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
        $Xor: [
            $description: "
                This method implements the `$Xor` function specified in the
                `/nebula/libraries/Logical/v1` library.
            "($mediaType: "application/bsmd")
            $procedure: {
                return xor(first, second)
            }
            $instructions: "
                1.ReturnStatement:
                LOAD VARIABLE $first
                LOAD VARIABLE $second
                CALL $xor WITH 2 ARGUMENTS
                PULL RESULT
            "($mediaType: "application/basm")
            $addresses: [
                "1.ReturnStatement": 1
            ]
            $bytecode: '60016002D0895000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target
            ]
            $variables: [
                $first
                $second
            ]($type: /nebula/collections/Set/v1)
            $messages: [ ]($type: /nebula/collections/Set/v1)
        ]($type: /nebula/aspects/Method/v1)
    ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Method/v1))
    $literals: [ ]($type: /nebula/collections/Set/v1)
](
    $type: /nebula/types/Primitive/v1
    $tag: #XX1KVKF8QTYYR33MTXC465NM3YY4LDLY
    $version: v1
    $permissions: /nebula/permissions/public/v1
    $previous: none
)
