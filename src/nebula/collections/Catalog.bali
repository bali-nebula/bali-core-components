[
    $parent: /nebula/abstractions/Collection/v1($itemType: /nebula/collections/Association/v1($keyType: keyType, $valueType: valueType))
    $description: "
        This primitive type defines the operations that a catalog component can respond to. It
        also provides a compiled method implementation for each operation.
    "($mediaType: "application/bsmd")
    $parameters: [
        $keyType: [
            $description: "
                This parameter specifies the name of the type of the keys in the catalog.
            "($mediaType: "application/bsmd")
            $type: /nebula/strings/Name/v1
            $default: /nebula/strings/Symbol/v1
        ]($type: /nebula/aspects/Parameter/v1)
        $valueType: [
            $description: "
                This parameter specifies the name of the type of the values in the catalog.
            "($mediaType: "application/bsmd")
            $type: /nebula/strings/Name/v1
            $default: /nebula/abstractions/Component/v1
        ]($type: /nebula/aspects/Parameter/v1)
    ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Parameter/v1))
    $libraries: [
        /nebula/libraries/Chainable/v1($itemType: /nebula/collections/Association/v1($keyType: keyType, $valueType: valueType))
    ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Name/v1))
    $interfaces: [
        /nebula/interfaces/Composite/v1(
            $keyType: keyType
            $valueType: valueType
        )
        /nebula/interfaces/Sortable/v1($itemType: /nebula/collections/Association/v1($keyType: keyType, $valueType: valueType))
    ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Name/v1))
    $functions: [
        $Extraction: [
            $description: "
                This operation returns the subset of attributes from the specified catalog based on
                the specified keys.
            "($mediaType: "application/bsmd")
            $type: /nebula/collections/Catalog/v1(
                $keyType: keyType
                $valueType: valueType
            )
            $parameters: [
                $catalog: [
                    $description: "
                        This parameter specifies the catalog to be extracted from.
                    "($mediaType: "application/bsmd")
                    $type: /nebula/collections/Catalog/v1(
                        $keyType: keyType
                        $valueType: valueType
                    )
                ]($type: /nebula/aspects/Parameter/v1)
                $keys: [
                    $description: "
                        This parameter specifies the list of keys to be used to extract the values.
                    "($mediaType: "application/bsmd")
                    $type: /nebula/collections/List/v1($itemType: keyType)
                ]($type: /nebula/aspects/Parameter/v1)
            ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Parameter/v1))
        ]($type: /nebula/aspects/Function/v1)
    ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Function/v1))
    $operations: [
        $keys: [
            $description: "
                This operation returns a list of the keys for this catalog.
            "($mediaType: "application/bsmd")
            $type: /nebula/collections/List/v1($itemType: keyType)
        ]($type: /nebula/aspects/Operation/v1)
        $removeAttribute: [
            $description: "
                This operation removes the attribute value associated with the specified key
                from this catalog.
            "($mediaType: "application/bsmd")
            $type: /nebula/collections/Catalog/v1(
                $keyType: keyType
                $valueType: valueType
            )
            $parameters: [
                $key: [
                    $description: "
                        This parameter specifies the key to be used to extract the attribute value.
                    "($mediaType: "application/bsmd")
                    $type: keyType
                ]($type: /nebula/aspects/Parameter/v1)
            ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Parameter/v1))
        ]($type: /nebula/aspects/Operation/v1)
        $removeAttributes: [
            $description: "
                This operation removes the attribute values associated with the specified list of keys
                from this catalog.
            "($mediaType: "application/bsmd")
            $type: /nebula/collections/Catalog/v1(
                $keyType: keyType
                $valueType: valueType
            )
            $parameters: [
                $keys: [
                    $description: "
                        This parameter specifies the list of keys to be used to extract the
                        attribute values.
                    "($mediaType: "application/bsmd")
                    $type: /nebula/collections/List/v1($itemType: keyType)
                ]($type: /nebula/aspects/Parameter/v1)
            ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Parameter/v1))
        ]($type: /nebula/aspects/Operation/v1)
    ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Operation/v1))
    $methods: [
        $keys: [
            $description: "
                This method implements the `$keys` operation defined in this type.
            "($mediaType: "application/bsmd")
            $procedure: {
                return keys(target)
            }
            $instructions: "
                1.ReturnStatement:
                PUSH ARGUMENT $target
                CALL $keys WITH 1 ARGUMENT
                PULL RESULT
            "($mediaType: "application/basm")
            $bytecode: '3801C8435000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target: none
            ]
            $variables: [ ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $messages: [ ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $addresses: [
                "1.ReturnStatement": 1
            ](
                $keyType: /nebula/strings/Text/v1
                $valueType: /nebula/interfaces/Discrete/v1
            )
        ]($type: /nebula/aspects/Method/v1)
        $removeAttribute: [
            $description: "
                This method implements the `$removeAttribute` operation defined in this type.
            "($mediaType: "application/bsmd")
            $procedure: {
                return removeAttribute(target, key)
            }
            $instructions: "
                1.ReturnStatement:
                PUSH ARGUMENT $target
                PUSH ARGUMENT $key
                CALL $removeAttribute WITH 2 ARGUMENTS
                PULL RESULT
            "($mediaType: "application/basm")
            $bytecode: '38013802D0675000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target: none
                $key: none
            ]
            $variables: [ ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $messages: [ ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $addresses: [
                "1.ReturnStatement": 1
            ](
                $keyType: /nebula/strings/Text/v1
                $valueType: /nebula/interfaces/Discrete/v1
            )
        ]($type: /nebula/aspects/Method/v1)
        $removeAttributes: [
            $description: "
                This method implements the `$removeAttributes` operation defined in this type.
            "($mediaType: "application/bsmd")
            $procedure: {
                with each $key in keys do {
                    removeAttribute(target, key)
                }
                return target
            }
            $instructions: "
                1.WithStatement:
                PUSH ARGUMENT $keys
                SEND $iterator TO COMPONENT
                SAVE VARIABLE $iterator-2
                
                1.1.ConditionClause:
                LOAD VARIABLE $iterator-2
                SEND $hasNext TO COMPONENT
                JUMP TO 1.WithStatementDone ON FALSE
                LOAD VARIABLE $iterator-2
                SEND $next TO COMPONENT
                SAVE VARIABLE $key
                
                1.1.1.EvaluateStatement:
                PUSH ARGUMENT $target
                LOAD VARIABLE $key
                CALL $removeAttribute WITH 2 ARGUMENTS
                SAVE VARIABLE $result-1
                
                1.ConditionRepeat:
                JUMP TO 1.1.ConditionClause
                
                1.WithStatementDone:
                JUMP TO NEXT INSTRUCTION
                
                2.ReturnStatement:
                PUSH ARGUMENT $target
                PULL RESULT
            "($mediaType: "application/basm")
            $bytecode: '
                3802E00280016001E001180F6001E003800238016002D067800300040000
                38015000
            '(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target: none
                $keys: none
            ]
            $variables: [
                $iterator-2
                $key
                $result-1
            ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $messages: [
                $hasNext
                $iterator
                $next
            ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $addresses: [
                "1.WithStatement": 1
                "1.1.ConditionClause": 4
                "1.1.1.EvaluateStatement": 10
                "1.ConditionRepeat": 14
                "1.WithStatementDone": 15
                "2.ReturnStatement": 16
            ](
                $keyType: /nebula/strings/Text/v1
                $valueType: /nebula/interfaces/Discrete/v1
            )
        ]($type: /nebula/aspects/Method/v1)
        $sortItems: [
            $description: "
                This method implements the `$sortItems` operation defined in the
                `/nebula/interfaces/Sortable/v1` interface.
            "($mediaType: "application/bsmd")
            $procedure: {
                return sortItems(target, sorter)
            }
            $instructions: "
                1.ReturnStatement:
                PUSH ARGUMENT $target
                PUSH ARGUMENT $sorter
                CALL $sortItems WITH 2 ARGUMENTS
                PULL RESULT
            "($mediaType: "application/basm")
            $bytecode: '38013802D07D5000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target: none
                $sorter: none
                $comparator: none
            ]
            $variables: [ ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $messages: [ ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $addresses: [
                "1.ReturnStatement": 1
            ](
                $keyType: /nebula/strings/Text/v1
                $valueType: /nebula/interfaces/Discrete/v1
            )
        ]($type: /nebula/aspects/Method/v1)
        $reverseItems: [
            $description: "
                This method implements the `$reverseItems` operation defined in the
                `/nebula/interfaces/Sortable/v1` interface.
            "($mediaType: "application/bsmd")
            $procedure: {
                return reverseItems(target)
            }
            $instructions: "
                1.ReturnStatement:
                PUSH ARGUMENT $target
                CALL $reverseItems WITH 1 ARGUMENT
                PULL RESULT
            "($mediaType: "application/basm")
            $bytecode: '3801C86D5000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target: none
            ]
            $variables: [ ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $messages: [ ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $addresses: [
                "1.ReturnStatement": 1
            ](
                $keyType: /nebula/strings/Text/v1
                $valueType: /nebula/interfaces/Discrete/v1
            )
        ]($type: /nebula/aspects/Method/v1)
        $setAttribute: [
            $description: "
                This method implements the `$setAttribute` operation defined in the
                `/nebula/interfaces/Composite/v1` interface.
            "($mediaType: "application/bsmd")
            $procedure: {
                return setAttribute(target, key, value)
            }
            $instructions: "
                1.ReturnStatement:
                PUSH ARGUMENT $target
                PUSH ARGUMENT $key
                PUSH ARGUMENT $value
                CALL $setAttribute WITH 3 ARGUMENTS
                PULL RESULT
            "($mediaType: "application/basm")
            $bytecode: '380138023803D8745000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target: none
                $key: none
                $value: none
            ]
            $variables: [ ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $messages: [ ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $addresses: [
                "1.ReturnStatement": 1
            ](
                $keyType: /nebula/strings/Text/v1
                $valueType: /nebula/interfaces/Discrete/v1
            )
        ]($type: /nebula/aspects/Method/v1)
        $attribute: [
            $description: "
                This method implements the `$attribute` operation defined in the
                `/nebula/interfaces/Composite/v1` interface.
            "($mediaType: "application/bsmd")
            $procedure: {
                return attribute(target, key)
            }
            $instructions: "
                1.ReturnStatement:
                PUSH ARGUMENT $target
                PUSH ARGUMENT $key
                CALL $attribute WITH 2 ARGUMENTS
                PULL RESULT
            "($mediaType: "application/basm")
            $bytecode: '38013802D00A5000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target: none
                $key: none
            ]
            $variables: [ ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $messages: [ ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $addresses: [
                "1.ReturnStatement": 1
            ](
                $keyType: /nebula/strings/Text/v1
                $valueType: /nebula/interfaces/Discrete/v1
            )
        ]($type: /nebula/aspects/Method/v1)
        $attributes: [
            $description: "
                This method implements the `$attributes` operation defined in this type.
            "($mediaType: "application/bsmd")
            $procedure: {
                $result := [ ]
                with each $key in keys do {
                    addItem(result, attribute(target, key))
                }
                return result
            }
            $instructions: "
                1.EvaluateStatement:
                NOTE --Place an empty list on the stack.
                CALL $list
                SAVE VARIABLE $result
                
                2.WithStatement:
                PUSH ARGUMENT $keys
                SEND $iterator TO COMPONENT
                SAVE VARIABLE $iterator-2
                
                2.1.ConditionClause:
                LOAD VARIABLE $iterator-2
                SEND $hasNext TO COMPONENT
                JUMP TO 2.WithStatementDone ON FALSE
                LOAD VARIABLE $iterator-2
                SEND $next TO COMPONENT
                SAVE VARIABLE $key
                
                2.1.1.EvaluateStatement:
                LOAD VARIABLE $result
                PUSH ARGUMENT $target
                LOAD VARIABLE $key
                CALL $attribute WITH 2 ARGUMENTS
                CALL $addItem WITH 2 ARGUMENTS
                SAVE VARIABLE $result-1
                
                2.ConditionRepeat:
                JUMP TO 2.1.ConditionClause
                
                2.WithStatementDone:
                JUMP TO NEXT INSTRUCTION
                
                3.ReturnStatement:
                LOAD VARIABLE $result
                PULL RESULT
            "($mediaType: "application/basm")
            $bytecode: '
                C04780033802E00280016001E00118136001E0038002600338016002D00A
                D00180040006000060035000
            '(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target: none
                $keys: none
            ]
            $variables: [
                $iterator-2
                $key
                $result
                $result-1
            ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $messages: [
                $hasNext
                $iterator
                $next
            ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $addresses: [
                "1.EvaluateStatement": 1
                "2.WithStatement": 3
                "2.1.ConditionClause": 6
                "2.1.1.EvaluateStatement": 12
                "2.ConditionRepeat": 18
                "2.WithStatementDone": 19
                "3.ReturnStatement": 20
            ](
                $keyType: /nebula/strings/Text/v1
                $valueType: /nebula/interfaces/Discrete/v1
            )
        ]($type: /nebula/aspects/Method/v1)
        $Extraction: [
            $description: "
                This method implements the `$Extraction` function defined in this type.
            "($mediaType: "application/bsmd")
            $procedure: {
                $result := duplicate(catalog, true)
                with each $key in keys do {
                    setAttribute(result, key, attribute(catalog, key))
                }
                return result
            }
            $instructions: "
                1.EvaluateStatement:
                PUSH ARGUMENT $catalog
                PUSH LITERAL `true`
                CALL $duplicate WITH 2 ARGUMENTS
                SAVE VARIABLE $result
                
                2.WithStatement:
                PUSH ARGUMENT $keys
                SEND $iterator TO COMPONENT
                SAVE VARIABLE $iterator-2
                
                2.1.ConditionClause:
                LOAD VARIABLE $iterator-2
                SEND $hasNext TO COMPONENT
                JUMP TO 2.WithStatementDone ON FALSE
                LOAD VARIABLE $iterator-2
                SEND $next TO COMPONENT
                SAVE VARIABLE $key
                
                2.1.1.EvaluateStatement:
                LOAD VARIABLE $result
                LOAD VARIABLE $key
                PUSH ARGUMENT $catalog
                LOAD VARIABLE $key
                CALL $attribute WITH 2 ARGUMENTS
                CALL $setAttribute WITH 3 ARGUMENTS
                SAVE VARIABLE $result-1
                
                2.ConditionRepeat:
                JUMP TO 2.1.ConditionClause
                
                2.WithStatementDone:
                JUMP TO NEXT INSTRUCTION
                
                3.ReturnStatement:
                LOAD VARIABLE $result
                PULL RESULT
            "($mediaType: "application/basm")
            $bytecode: '
                38022801D02480033803E00280016001E00118166001E003800260036002
                38026002D00AD87480040008000060035000
            '(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target: none
                $catalog: none
                $keys: none
            ]
            $variables: [
                $iterator-2
                $key
                $result
                $result-1
            ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $messages: [
                $hasNext
                $iterator
                $next
            ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $addresses: [
                "1.EvaluateStatement": 1
                "2.WithStatement": 5
                "2.1.ConditionClause": 8
                "2.1.1.EvaluateStatement": 14
                "2.ConditionRepeat": 21
                "2.WithStatementDone": 22
                "3.ReturnStatement": 23
            ](
                $keyType: /nebula/strings/Text/v1
                $valueType: /nebula/interfaces/Discrete/v1
            )
        ]($type: /nebula/aspects/Method/v1)
        $Chain: [
            $description: "
                This method implements the `$Chain` function defined in the
                `/nebula/libraries/Chainable/v1` library.
            "($mediaType: "application/bsmd")
            $procedure: {
                return chain(first, second)
            }
            $instructions: "
                1.ReturnStatement:
                PUSH ARGUMENT $first
                PUSH ARGUMENT $second
                CALL $chain WITH 2 ARGUMENTS
                PULL RESULT
            "($mediaType: "application/basm")
            $bytecode: '38023803D0135000'(
                $encoding: $base16
                $mediaType: "application/bcod"
            )
            $arguments: [
                $target: none
                $first: none
                $second: none
            ]
            $variables: [ ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $messages: [ ]($type: /nebula/collections/Set/v1($itemType: /nebula/strings/Symbol/v1))
            $addresses: [
                "1.ReturnStatement": 1
            ](
                $keyType: /nebula/strings/Text/v1
                $valueType: /nebula/interfaces/Discrete/v1
            )
        ]($type: /nebula/aspects/Method/v1)
    ]($type: /nebula/collections/Catalog/v1($valueType: /nebula/aspects/Method/v1))
    $literals: [
        true
    ]($type: /nebula/collections/Set/v1)
](
    $type: /nebula/types/Primitive/v1
    $tag: #455135X1XN4R3QN43F1ZV4GJ02XBSRP0
    $version: v1
    $permissions: /nebula/permissions/public/v1
    $previous: none
)
