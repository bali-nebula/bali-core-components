[
    $description: "
        This abstract primitive type defines the methods for the messages that all collection
        types support.
    "($mediaType: "application/bsmd")
    $parameters: [
        $itemType: [
            $description: "
                This parameter specifies the type of items that a collection of this type supports.
            "($mediaType: "application/bsmd")
            $type: /bali/elements/Name/v1
            $default: /bali/abstractions/Component/v1
        ]
    ]
    $interfaces: [
        /bali/abstractions/Sequential/v1($itemType: itemType)
    ]
    $methods: [
        $addItem: [
            $description: "
                This method attempts to add the specified item to this collection.  The updated
                collection is returned.
            "($mediaType: "application/bsmd")
            $type: /bali/abstractions/Collection/v1($itemType: itemType)
            $parameters: [
                $item: [
                    $description: "
                        This parameter specifies the item to be added to this collection.
                    "($mediaType: "application/bsmd")
                    $type: $itemType
                ]
            ]
            $procedure: {
                throw [
                    $module: /bali/abstractions/Collection/v1
                    $method: $addItem
                    $exception: $abstractMethod
                    $text: "An abstract method must be implemented by a subtype."
                ]
            }
        ]
        $addItems: [
            $description: "
                This method attempts to add the specified sequence of items to this collection.
                The updated collection is returned.
            "($mediaType: "application/bsmd")
            $type: /bali/abstractions/Collection/v1($itemType: itemType)
            $parameters: [
                $items: [
                    $description: "
                        This parameter specifies the collection of items to be added to this collection.
                    "($mediaType: "application/bsmd")
                    $type: /bali/abstractions/Collection/v1($itemType: itemType)
                ]
            ]
            $procedure: {
                with each $item in items do {
                    target.addItem(item)
                }
                return target
            }
        ]
        $containsAll: [
            $description: "
                This method determines whether or not this collection contains all of the
                specified items.
            "($mediaType: "application/bsmd")
            $type: /bali/elements/Probability/v1($granularity: $boolean)
            $parameters: [
                $items: [
                    $description: "
                        This parameter specifies the collection of items to be searched for in this
                        collection.
                    "($mediaType: "application/bsmd")
                    $type: /bali/abstractions/Collection/v1($itemType: itemType)
                ]
            ]
            $procedure: {
                with each $item in items do {
                    if NOT target.containsItem(item) then {
                        return false
                    }
                }
                return true
            }
        ]
        $containsAny: [
            $description: "
                This method determines whether or not this collection contains any of the
                specified items.
            "($mediaType: "application/bsmd")
            $type: /bali/elements/Probability/v1($granularity: $boolean)
            $parameters: [
                $items: [
                    $description: "
                        This parameter specifies the collection of items to be searched for in this
                        collection.
                    "($mediaType: "application/bsmd")
                    $type: /bali/abstractions/Collection/v1($itemType: itemType)
                ]
            ]
            $procedure: {
                with each $item in items do {
                    if target.containsItem(item) then {
                        return true
                    }
                }
                return false
            }
        ]
        $containsItem: [
            $description: "
                This method determines whether or not this collection contains the specified
                item.
            "($mediaType: "application/bsmd")
            $type: /bali/elements/Probability/v1($granularity: $boolean)
            $parameters: [
                $item: [
                    $description: "
                        This parameter specifies the item to be searched for in this collection.
                    "($mediaType: "application/bsmd")
                    $type: $itemType
                ]
            ]
            $procedure: {
                return target.index(item) > 0
            }
        ]
        $index: [
            $description: "
                This method returns the index of the specified item from this collection, or 0
                if it is not found.
            "($mediaType: "application/bsmd")
            $type: /bali/interfaces/Discrete/v1($range: [0..<])
            $parameters: [
                $item: [
                    $description: "
                        This parameter specifies the item in the collection for which the index
                        should be returned.
                    "($mediaType: "application/bsmd")
                    $type: $itemType
                ]
            ]
            $procedure: {
                $index := 0
                with each $candidate in target do {
                    $index += 1
                    if candidate = item then {
                        break loop
                    }
                }
                return index
            }
        ]
        $isEmpty: [
            $description: "
                This method determines whether or not this collection is empty.
            "($mediaType: "application/bsmd")
            $type: /bali/elements/Probability/v1($granularity: $boolean)
            $procedure: {
                return target.size() = 0
            }
        ]
        $item: [
            $description: "
                This method returns from this collection the item corresponding to the specified
                index.
            "($mediaType: "application/bsmd")
            $type: $itemType
            $parameters: [
                $index: [
                    $description: "
                        This parameter specifies the index of the item to be returned from this
                        collection.
                    "($mediaType: "application/bsmd")
                    $type: /bali/elements/Number/v1
                ]
            ]
            $procedure: {
                $iterator := target.iterator()
                iterator.toSlot(index)
                return iterator.previous()
            }
        ]
        $items: [
            $description: "
                This method returns from this collection the subset of items in the specified
                range.
            "($mediaType: "application/bsmd")
            $type: /bali/abstractions/Collection/v1($itemType: itemType)
            $parameters: [
                $range: [
                    $description: "
                        This parameter specifies the range of indices for the items to be returned
                        from this collection.
                    "($mediaType: "application/bsmd")
                    $type: /bali/elements/Range/v1
                ]
            ]
            $procedure: {
                throw [
                    $module: /bali/abstractions/Collection/v1
                    $method: $items
                    $exception: $abstractMethod
                    $text: "An abstract method must be implemented by a subtype."
                ]
            }
        ]
        $iterator: [
            $description: "
                This method returns an iterator that can be used to visit, in order, each item
                in this collection.
            "($mediaType: "application/bsmd")
            $type: /bali/abstractions/Iterator/v1($itemType: itemType)
            $procedure: {
                throw [
                    $module: /bali/abstractions/Collection/v1
                    $method: $iterator
                    $exception: $abstractMethod
                    $text: "An abstract method must be implemented by a subtype."
                ]
            }
        ]
        $removeAll: [
            $description: "
                This method removes all the items from this collection.
            "($mediaType: "application/bsmd")
            $type: /bali/abstractions/Collection/v1($itemType: itemType)
            $procedure: {
                throw [
                    $module: /bali/abstractions/Collection/v1
                    $method: $removeAll
                    $exception: $abstractMethod
                    $text: "An abstract method must be implemented by a subtype."
                ]
            }
        ]
        $size: [
            $description: "
                This method returns the number of items contained in this collection.
            "($mediaType: "application/bsmd")
            $type: /bali/interfaces/Discrete/v1($range: [0..<])
            $procedure: {
                throw [
                    $module: /bali/abstractions/Collection/v1
                    $method: $size
                    $exception: $abstractMethod
                    $text: "An abstract method must be implemented by a subtype."
                ]
            }
        ]
    ]
](
    $type: /bali/types/Primitive/v1($existence: $abstract)
    $tag: #69KMNPGSBDXWLBATY5PR9GSNM9MV7GV2
    $version: v1
    $permissions: /bali/permissions/public/v1
    $previous: none
)
